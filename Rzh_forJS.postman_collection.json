{
	"info": {
		"_postman_id": "91ef43e7-a695-47a1-b8f5-eb92178eddcf",
		"name": "Rzh_forJS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21956355"
	},
	"item": [
		{
			"name": "Sign Up",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.headers.get(\"Content-Type\") === \"application/json\") {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.test(\"Response is valid JSON\", function () {\r",
							"        pm.expect(jsonData).to.be.an(\"object\");\r",
							"    });\r",
							"} else {\r",
							"    console.log(\"Response is not JSON:\", pm.response.text());\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"// Moved the userId variable declaration inside the if block\r",
							"if (pm.response.headers.get(\"Content-Type\") === \"application/json\") {\r",
							"    const userId = jsonData.userId;\r",
							"    pm.collectionVariables.set('userId', userId);\r",
							"    console.log(\"userId set successfully:\", userId);\r",
							"}\r",
							"\r",
							"console.log(pm.collectionVariables.get('email'))\r",
							"\r",
							"var requestBody = pm.request.body.raw;\r",
							"const jsonBody = JSON.parse(requestBody)\r",
							"const oldPass = jsonBody.repeatPassword;\r",
							"\r",
							"pm.collectionVariables.set('oldPass', oldPass);\r",
							"console.log(\"oldPass=:\", oldPass);\r",
							"\r",
							"// Отримуємо значення змінних середовища\r",
							"let expectedStatus = parseInt(pm.environment.get(\"expectedStatus\"), 10);\r",
							"let expectedMessage = pm.environment.get(\"expectedMessage\");\r",
							"let testName = pm.environment.get(\"testName\");\r",
							"\r",
							"// Отримуємо відповідь сервера\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Лог тесту\r",
							"console.log(`Running Test: ${testName}`);\r",
							"console.log(`Expected Status: ${expectedStatus}, Received Status: ${pm.response.code}`);\r",
							"console.log(`Expected Message: ${expectedMessage}, Received Message: ${responseData.message}`);\r",
							"\r",
							"// Перевіряємо статус код\r",
							"pm.test(`Status code is ${expectedStatus}`, function () {\r",
							"    pm.response.to.have.status(expectedStatus);\r",
							"});\r",
							"\r",
							"// Перевіряємо повідомлення\r",
							"pm.test(`Response message is correct`, function () {\r",
							"    pm.expect(responseData.message).to.eql(expectedMessage);\r",
							"});\r",
							"\r",
							"// Переключаємося до наступного тесту\r",
							"let index = parseInt(pm.environment.get(\"current_test_index\"), 10);\r",
							"index++;\r",
							"\r",
							"// Отримуємо всі тести\r",
							"let allTests = JSON.parse(pm.environment.get(\"tests\"));\r",
							"\r",
							"// Якщо є ще тести, запускаємо наступний\r",
							"if (index < allTests.length) {\r",
							"    pm.environment.set(\"current_test_index\", index);\r",
							"    pm.environment.set(\"testData\", allTests[index].testData);\r",
							"    pm.environment.set(\"expectedStatus\", allTests[index].expectedStatus);\r",
							"    pm.environment.set(\"expectedMessage\", allTests[index].expectedMessage);\r",
							"    pm.environment.set(\"testName\", allTests[index].name);\r",
							"\r",
							"    pm.execution.setNextRequest();\r",
							"} else {\r",
							"    // Очистка змінних середовища, якщо всі тести виконано\r",
							"    pm.environment.unset(\"tests\");\r",
							"    pm.environment.unset(\"current_test_index\");\r",
							"    pm.environment.unset(\"testData\");\r",
							"    pm.environment.unset(\"expectedStatus\");\r",
							"    pm.environment.unset(\"expectedMessage\");\r",
							"    pm.environment.unset(\"testName\");\r",
							"    \r",
							"    console.log(\"✅ All tests completed!\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function myRandomEmail() {\r",
							"    const randomSymbols = 'abcDEFG0123456789';\r",
							"    let randomPart = '';\r",
							"    for (let i = 0; i < 5; i++) {\r",
							"        randomPart += randomSymbols.charAt(Math.floor(Math.random() * randomSymbols.length));\r",
							"    }\r",
							"    return randomPart + \"@gmail.com\";\r",
							"}\r",
							"\r",
							"const email = myRandomEmail();\r",
							"pm.collectionVariables.set('email', email);\r",
							"console.log(email);\r",
							"\r",
							"// два оточення\r",
							"const urls = [\"https://qauto2.forstudy.space/api/\", \"https://qauto.forstudy.space/api/\"];\r",
							"\r",
							"// Ініціалізація тестів\r",
							"if (!pm.environment.get(\"tests\")) {\r",
							"    pm.environment.set(\"tests\", JSON.stringify([\r",
							"        { name: \"Empty name field\", testData: \"\", expectedStatus: 400, expectedMessage: \"Name is required\" },\r",
							"        { name: \"Invalid name (only symbols)\", testData: \"@@@@\", expectedStatus: 400, expectedMessage: \"Name is invalid\" },\r",
							"        { name: \"Too short name\", testData: \"A\", expectedStatus: 400, expectedMessage: \"Name has to be from 2 to 20 characters long\" },\r",
							"        { name: \"Too long name\", testData: \"ABCDEFGHIJKLMNOPQRSTU\", expectedStatus: 400, expectedMessage: \"Name has to be from 2 to 20 characters long\" },\r",
							"        { name: \"Valid name with spaces\", testData: \" John  \", expectedStatus: 200, expectedMessage: \"Success\" },\r",
							"        { name: \"Name with numbers\", testData: \"John123\", expectedStatus: 400, expectedMessage: \"Name is invalid\" },\r",
							"        { name: \"Empty last name field\", testData: \"\", expectedStatus: 400, expectedMessage: \"Last name is required\" },\r",
							"        { name: \"Invalid last name (only symbols)\", testData: \"####\", expectedStatus: 400, expectedMessage: \"Last Name is invalid\" },\r",
							"        { name: \"Too short last name\", testData: \"B\", expectedStatus: 400, expectedMessage: \"Last name has to be from 2 to 20 characters long\" },\r",
							"        { name: \"Too long last name\", testData: \"ABCDEFGHIJKLMNOPQRSTU\", expectedStatus: 400, expectedMessage: \"Last name has to be from 2 to 20 characters long\" },\r",
							"        { name: \"Valid last name with spaces\", testData: \"  Smith  \", expectedStatus: 200, expectedMessage: \"Success\" },\r",
							"        { name: \"Last name with numbers\", testData: \"Smith99\", expectedStatus: 400, expectedMessage: \"Last Name is invalid\" }\r",
							"    ]));\r",
							"    pm.environment.set(\"current_test_index\", 0);\r",
							"    pm.environment.set(\"current_url_index\", 0);\r",
							"}\r",
							"\r",
							"// Отримуємо поточні тести\r",
							"let currentTests = JSON.parse(pm.environment.get(\"tests\") || \"[]\");\r",
							"\r",
							"if (currentTests.length === 0) {\r",
							"    console.log(\"❌ No tests found!\");\r",
							"    return;\r",
							"}\r",
							"\r",
							"let testIndex = parseInt(pm.environment.get(\"current_test_index\"), 10) || 0;\r",
							"let urlIndex = parseInt(pm.environment.get(\"current_url_index\"), 10) || 0;\r",
							"\r",
							"if (testIndex >= currentTests.length) {\r",
							"    console.log(\"❌ Test index out of range!\");\r",
							"    return;\r",
							"}\r",
							"\r",
							"let currentTest = currentTests[testIndex];\r",
							"\r",
							"// Встановлюємо змінні для тестування\r",
							"pm.environment.set(\"testData\", currentTest.testData);\r",
							"pm.environment.set(\"expectedStatus\", currentTest.expectedStatus);\r",
							"pm.environment.set(\"expectedMessage\", currentTest.expectedMessage);\r",
							"pm.environment.set(\"testName\", currentTest.name);\r",
							"pm.collectionVariables.set(\"baseUrl\", urls[urlIndex]);\r",
							"\r",
							"// Логіка перемикання тестів та оточень\r",
							"if (testIndex + 1 < currentTests.length) {\r",
							"    pm.environment.set(\"current_test_index\", testIndex + 1);\r",
							"} else if (urlIndex + 1 < urls.length) {\r",
							"    pm.environment.set(\"current_test_index\", 0);\r",
							"    pm.environment.set(\"current_url_index\", urlIndex + 1);\r",
							"} else {\r",
							"    pm.environment.unset(\"tests\");\r",
							"    pm.environment.unset(\"current_test_index\");\r",
							"    pm.environment.unset(\"current_url_index\");\r",
							"    console.log(\"✅ All tests completed!\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{testData}}\",\r\n  \"lastName\": \"{{testData}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"123QWEasd\",\r\n  \"repeatPassword\": \"123QWEasd\"\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/signup",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Log In",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed the test to handle undefined data\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"if(jsonData.data){\r",
							"    const userId = jsonData.data.userId;\r",
							"    pm.collectionVariables.set(\"userId\", userId);\r",
							"    console.log(\"userId set successfully:\", userId);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"remember\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/signin",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Car",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							" \r",
							"const carID = jsonData.data.id;\r",
							"    pm.collectionVariables.set(\"carID\", carID);\r",
							"    console.log(\"carID =\", carID);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"carBrandId\": 1,\r\n  \"carModelId\": 2,\r\n  \"mileage\": 122\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cars",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cars"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add expenses",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Перероблений скріпт відповідно до завдання Запит додавання витрати створеній автівці - треба зробити так, щоб при повторному додаванні витрат запит працював. Що мається на увазі, потрібно, щоб значення витрат була більшою за попереднє значення.\r",
							"const newDate = new Date();\r",
							"pm.collectionVariables.set('newDate', newDate);\r",
							"\r",
							"\r",
							"let previousLiters = pm.collectionVariables.get('previousLiters');\r",
							"\r",
							"\r",
							"if (!previousLiters) {\r",
							"    previousLiters = 23; \r",
							"    pm.collectionVariables.set('previousLiters', previousLiters);\r",
							"}\r",
							"\r",
							"\r",
							"const newLiters = parseInt(previousLiters) + 1;\r",
							"pm.collectionVariables.set('newLiters', newLiters);\r",
							"\r",
							"\r",
							"console.log(\"Попереднє значення liters:\", previousLiters);\r",
							"console.log(\"Нове значення liters:\", newLiters);\r",
							"\r",
							"\r",
							"let previousTotalCost = pm.collectionVariables.get('previousTotalCost');\r",
							"if (!previousTotalCost) {\r",
							"    previousTotalCost = 23; \r",
							"    pm.collectionVariables.set('previousTotalCost', previousTotalCost);\r",
							"}\r",
							"\r",
							"const newTotalCost = parseInt(previousTotalCost) + 1;\r",
							"pm.collectionVariables.set('newTotalCost', newTotalCost);\r",
							"\r",
							"console.log(\"Попереднє значення totalCost:\", previousTotalCost);\r",
							"console.log(\"Нове значення totalCost:\", newTotalCost);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Перероблений скріпт відповідно до завдання Запит додавання витрати створеній автівці - треба зробити так, щоб при повторному додаванні витрат запит працював. Що мається на увазі, потрібно, щоб значення витрат була більшою за попереднє значення.\r",
							"const response = pm.response.json();\r",
							"\r",
							"\r",
							"console.log(\"Відповідь сервера:\", response);\r",
							"\r",
							"\r",
							"pm.test(\"Перевірка статусу відповіді\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"let previousExpense = pm.collectionVariables.get('previousExpenseValue');\r",
							"if (!previousExpense) {\r",
							" \r",
							"    previousExpense = 0;\r",
							"    pm.collectionVariables.set('previousExpenseValue', previousExpense);\r",
							"}\r",
							"console.log(\"Попередня витрата:\", previousExpense);\r",
							"\r",
							"\r",
							"const newExpense = response.data ? response.data.totalCost : null; \r",
							"console.log(\"Нова витрата:\", newExpense);\r",
							"\r",
							"\r",
							"if (newExpense !== null) {\r",
							"    pm.test(\"Перевірка, що нова витрата визначена\", function () {\r",
							"        pm.expect(newExpense).to.be.a('number');\r",
							"    });\r",
							"\r",
							"   \r",
							"    pm.test(\"Перевірка збільшення витрат\", function () {\r",
							"        pm.expect(newExpense).to.be.greaterThan(previousExpense);\r",
							"    });\r",
							"\r",
							"    \r",
							"    pm.collectionVariables.set('previousExpenseValue', newExpense);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"carId\": {{carID}},\r\n  \"reportedAt\": \"{{newDate}}\",\r\n  \"mileage\": 233,\r\n  \"liters\": {{newLiters}},\r\n  \"totalCost\": {{newTotalCost}},\r\n  \"forceMileage\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/expenses",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"expenses"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "updatedUser",
			"value": ""
		},
		{
			"key": "photo",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "dateBirth",
			"value": ""
		},
		{
			"key": "country",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "oldPass",
			"value": ""
		},
		{
			"key": "carID",
			"value": ""
		},
		{
			"key": "newDate",
			"value": ""
		},
		{
			"key": "previousExpenseValue",
			"value": ""
		},
		{
			"key": "previousLiters",
			"value": ""
		},
		{
			"key": "newLiters",
			"value": ""
		},
		{
			"key": "previousTotalCost",
			"value": ""
		},
		{
			"key": "newTotalCost",
			"value": ""
		}
	]
}